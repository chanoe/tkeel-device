// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: api/device/v1/device.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// user to device
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevBasicInfo *DeviceEntityBasicInfo `protobuf:"bytes,1,opt,name=devBasicInfo,proto3" json:"devBasicInfo"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDeviceRequest) GetDevBasicInfo() *DeviceEntityBasicInfo {
	if x != nil {
		return x.DevBasicInfo
	}
	return nil
}

type CreateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//api.core.v1.EntityResponse deviceObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备对象"}];
	DeviceObject *structpb.Value `protobuf:"bytes,1,opt,name=deviceObject,proto3" json:"deviceObject"`
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDeviceResponse) GetDeviceObject() *structpb.Value {
	if x != nil {
		return x.DeviceObject
	}
	return nil
}

type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DevBasicInfo *DeviceEntityBasicInfo `protobuf:"bytes,2,opt,name=devBasicInfo,proto3" json:"devBasicInfo"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeviceRequest) GetDevBasicInfo() *DeviceEntityBasicInfo {
	if x != nil {
		return x.DevBasicInfo
	}
	return nil
}

type UpdateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//api.core.v1.EntityResponse deviceObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备对象"}];
	DeviceObject *structpb.Value `protobuf:"bytes,1,opt,name=deviceObject,proto3" json:"deviceObject"`
}

func (x *UpdateDeviceResponse) Reset() {
	*x = UpdateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResponse) ProtoMessage() {}

func (x *UpdateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDeviceResponse) GetDeviceObject() *structpb.Value {
	if x != nil {
		return x.DeviceObject
	}
	return nil
}

type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids *Ids `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteDeviceRequest) GetIds() *Ids {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaildDelDevice []*FaildDelDevice `protobuf:"bytes,1,rep,name=faildDelDevice,proto3" json:"faildDelDevice"`
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteDeviceResponse) GetFaildDelDevice() []*FaildDelDevice {
	if x != nil {
		return x.FaildDelDevice
	}
	return nil
}

type FaildDelDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason"`
}

func (x *FaildDelDevice) Reset() {
	*x = FaildDelDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaildDelDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaildDelDevice) ProtoMessage() {}

func (x *FaildDelDevice) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaildDelDevice.ProtoReflect.Descriptor instead.
func (*FaildDelDevice) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{6}
}

func (x *FaildDelDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FaildDelDevice) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{7}
}

func (x *GetDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//api.core.v1.EntityResponse deviceObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备对象"}];
	DeviceObject *structpb.Value `protobuf:"bytes,1,opt,name=deviceObject,proto3" json:"deviceObject"`
}

func (x *GetDeviceResponse) Reset() {
	*x = GetDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResponse) ProtoMessage() {}

func (x *GetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{8}
}

func (x *GetDeviceResponse) GetDeviceObject() *structpb.Value {
	if x != nil {
		return x.DeviceObject
	}
	return nil
}

type ListDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListEntityQuery *ListEntityQuery `protobuf:"bytes,1,opt,name=listEntityQuery,proto3" json:"listEntityQuery"`
}

func (x *ListDeviceRequest) Reset() {
	*x = ListDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceRequest) ProtoMessage() {}

func (x *ListDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{9}
}

func (x *ListDeviceRequest) GetListEntityQuery() *ListEntityQuery {
	if x != nil {
		return x.ListEntityQuery
	}
	return nil
}

type ListDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//api.core.v1.ListEntityResponse listDeviceObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备列表对象"}];
	ListDeviceObject *structpb.Value `protobuf:"bytes,1,opt,name=listDeviceObject,proto3" json:"listDeviceObject"`
}

func (x *ListDeviceResponse) Reset() {
	*x = ListDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceResponse) ProtoMessage() {}

func (x *ListDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{10}
}

func (x *ListDeviceResponse) GetListDeviceObject() *structpb.Value {
	if x != nil {
		return x.ListDeviceObject
	}
	return nil
}

type EnableDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable *Enable `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable"`
	Id     string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
}

func (x *EnableDeviceRequest) Reset() {
	*x = EnableDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDeviceRequest) ProtoMessage() {}

func (x *EnableDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDeviceRequest.ProtoReflect.Descriptor instead.
func (*EnableDeviceRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{11}
}

func (x *EnableDeviceRequest) GetEnable() *Enable {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *EnableDeviceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddDeviceExtBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	ExtBusiness *structpb.Value `protobuf:"bytes,2,opt,name=extBusiness,proto3" json:"extBusiness"`
}

func (x *AddDeviceExtBusinessRequest) Reset() {
	*x = AddDeviceExtBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceExtBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceExtBusinessRequest) ProtoMessage() {}

func (x *AddDeviceExtBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceExtBusinessRequest.ProtoReflect.Descriptor instead.
func (*AddDeviceExtBusinessRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{12}
}

func (x *AddDeviceExtBusinessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddDeviceExtBusinessRequest) GetExtBusiness() *structpb.Value {
	if x != nil {
		return x.ExtBusiness
	}
	return nil
}

type AddDeviceExtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Ext *structpb.Value `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext"`
}

func (x *AddDeviceExtRequest) Reset() {
	*x = AddDeviceExtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceExtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceExtRequest) ProtoMessage() {}

func (x *AddDeviceExtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceExtRequest.ProtoReflect.Descriptor instead.
func (*AddDeviceExtRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{13}
}

func (x *AddDeviceExtRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddDeviceExtRequest) GetExt() *structpb.Value {
	if x != nil {
		return x.Ext
	}
	return nil
}

type DeleteDeviceExtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys *Keys  `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
}

func (x *DeleteDeviceExtRequest) Reset() {
	*x = DeleteDeviceExtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceExtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceExtRequest) ProtoMessage() {}

func (x *DeleteDeviceExtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceExtRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceExtRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteDeviceExtRequest) GetKeys() *Keys {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeleteDeviceExtRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteDeviceExtBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys *Keys  `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
}

func (x *DeleteDeviceExtBusinessRequest) Reset() {
	*x = DeleteDeviceExtBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceExtBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceExtBusinessRequest) ProtoMessage() {}

func (x *DeleteDeviceExtBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceExtBusinessRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceExtBusinessRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteDeviceExtBusinessRequest) GetKeys() *Keys {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *DeleteDeviceExtBusinessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateDeviceExtBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	ExtBusiness *structpb.Value `protobuf:"bytes,2,opt,name=extBusiness,proto3" json:"extBusiness"`
}

func (x *UpdateDeviceExtBusinessRequest) Reset() {
	*x = UpdateDeviceExtBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceExtBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceExtBusinessRequest) ProtoMessage() {}

func (x *UpdateDeviceExtBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceExtBusinessRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceExtBusinessRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateDeviceExtBusinessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeviceExtBusinessRequest) GetExtBusiness() *structpb.Value {
	if x != nil {
		return x.ExtBusiness
	}
	return nil
}

type UpdateDeviceExtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Ext *structpb.Value `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext"`
}

func (x *UpdateDeviceExtRequest) Reset() {
	*x = UpdateDeviceExtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceExtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceExtRequest) ProtoMessage() {}

func (x *UpdateDeviceExtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceExtRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceExtRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDeviceExtRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeviceExtRequest) GetExt() *structpb.Value {
	if x != nil {
		return x.Ext
	}
	return nil
}

type CreateDeviceDataRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Expressions *ListEntityExpression `protobuf:"bytes,2,opt,name=expressions,proto3" json:"expressions"`
}

func (x *CreateDeviceDataRelationRequest) Reset() {
	*x = CreateDeviceDataRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceDataRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceDataRelationRequest) ProtoMessage() {}

func (x *CreateDeviceDataRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceDataRelationRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceDataRelationRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{18}
}

func (x *CreateDeviceDataRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateDeviceDataRelationRequest) GetExpressions() *ListEntityExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type UpdateDeviceDataRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Expressions *ListEntityExpression `protobuf:"bytes,2,opt,name=expressions,proto3" json:"expressions"`
}

func (x *UpdateDeviceDataRelationRequest) Reset() {
	*x = UpdateDeviceDataRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceDataRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceDataRelationRequest) ProtoMessage() {}

func (x *UpdateDeviceDataRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceDataRelationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceDataRelationRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateDeviceDataRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDeviceDataRelationRequest) GetExpressions() *ListEntityExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type GetDeviceDataRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path"`
}

func (x *GetDeviceDataRelationRequest) Reset() {
	*x = GetDeviceDataRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceDataRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceDataRelationRequest) ProtoMessage() {}

func (x *GetDeviceDataRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceDataRelationRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceDataRelationRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{20}
}

func (x *GetDeviceDataRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDeviceDataRelationRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GetDeviceDataRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions *structpb.Value `protobuf:"bytes,1,opt,name=expressions,proto3" json:"expressions"`
}

func (x *GetDeviceDataRelationResponse) Reset() {
	*x = GetDeviceDataRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceDataRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceDataRelationResponse) ProtoMessage() {}

func (x *GetDeviceDataRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceDataRelationResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceDataRelationResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{21}
}

func (x *GetDeviceDataRelationResponse) GetExpressions() *structpb.Value {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type DeleteDeviceDataRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Paths *Paths `protobuf:"bytes,2,opt,name=paths,proto3" json:"paths"`
}

func (x *DeleteDeviceDataRelationRequest) Reset() {
	*x = DeleteDeviceDataRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceDataRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceDataRelationRequest) ProtoMessage() {}

func (x *DeleteDeviceDataRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceDataRelationRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceDataRelationRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteDeviceDataRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDeviceDataRelationRequest) GetPaths() *Paths {
	if x != nil {
		return x.Paths
	}
	return nil
}

type ListDeviceDataRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *ListDeviceDataRelationRequest) Reset() {
	*x = ListDeviceDataRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceDataRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceDataRelationRequest) ProtoMessage() {}

func (x *ListDeviceDataRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceDataRelationRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceDataRelationRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{23}
}

func (x *ListDeviceDataRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListDeviceDataRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionObject *structpb.Value `protobuf:"bytes,1,opt,name=expressionObject,proto3" json:"expressionObject"`
}

func (x *ListDeviceDataRelationResponse) Reset() {
	*x = ListDeviceDataRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceDataRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceDataRelationResponse) ProtoMessage() {}

func (x *ListDeviceDataRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceDataRelationResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceDataRelationResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{24}
}

func (x *ListDeviceDataRelationResponse) GetExpressionObject() *structpb.Value {
	if x != nil {
		return x.ExpressionObject
	}
	return nil
}

type CreateDeviceDataRelationAutoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Relation *Relation `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation"`
}

func (x *CreateDeviceDataRelationAutoRequest) Reset() {
	*x = CreateDeviceDataRelationAutoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceDataRelationAutoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceDataRelationAutoRequest) ProtoMessage() {}

func (x *CreateDeviceDataRelationAutoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceDataRelationAutoRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceDataRelationAutoRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{25}
}

func (x *CreateDeviceDataRelationAutoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateDeviceDataRelationAutoRequest) GetRelation() *Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

type CreateDeviceDataRelationAutoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionObject *structpb.Value `protobuf:"bytes,1,opt,name=expressionObject,proto3" json:"expressionObject"`
}

func (x *CreateDeviceDataRelationAutoResponse) Reset() {
	*x = CreateDeviceDataRelationAutoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceDataRelationAutoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceDataRelationAutoResponse) ProtoMessage() {}

func (x *CreateDeviceDataRelationAutoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceDataRelationAutoResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceDataRelationAutoResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{26}
}

func (x *CreateDeviceDataRelationAutoResponse) GetExpressionObject() *structpb.Value {
	if x != nil {
		return x.ExpressionObject
	}
	return nil
}

type SetDeviceRawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *SetDeviceRawRequest) Reset() {
	*x = SetDeviceRawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceRawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceRawRequest) ProtoMessage() {}

func (x *SetDeviceRawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceRawRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceRawRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{27}
}

func (x *SetDeviceRawRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetDeviceRawRequest) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetDeviceAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Content *SetContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
}

func (x *SetDeviceAttributeRequest) Reset() {
	*x = SetDeviceAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceAttributeRequest) ProtoMessage() {}

func (x *SetDeviceAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceAttributeRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{28}
}

func (x *SetDeviceAttributeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetDeviceAttributeRequest) GetContent() *SetContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type SetDeviceCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Content *SetContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
}

func (x *SetDeviceCommandRequest) Reset() {
	*x = SetDeviceCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceCommandRequest) ProtoMessage() {}

func (x *SetDeviceCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceCommandRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceCommandRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{29}
}

func (x *SetDeviceCommandRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetDeviceCommandRequest) GetContent() *SetContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type SaveDeviceConfAsSelfTemplteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *SaveDeviceConfAsSelfTemplteRequest) Reset() {
	*x = SaveDeviceConfAsSelfTemplteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDeviceConfAsSelfTemplteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDeviceConfAsSelfTemplteRequest) ProtoMessage() {}

func (x *SaveDeviceConfAsSelfTemplteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDeviceConfAsSelfTemplteRequest.ProtoReflect.Descriptor instead.
func (*SaveDeviceConfAsSelfTemplteRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{30}
}

func (x *SaveDeviceConfAsSelfTemplteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SaveDeviceConfAsOtherTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	OtherTemplateInfo *TemplateBasicInfo `protobuf:"bytes,2,opt,name=otherTemplateInfo,proto3" json:"otherTemplateInfo"`
}

func (x *SaveDeviceConfAsOtherTemplateRequest) Reset() {
	*x = SaveDeviceConfAsOtherTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDeviceConfAsOtherTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDeviceConfAsOtherTemplateRequest) ProtoMessage() {}

func (x *SaveDeviceConfAsOtherTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDeviceConfAsOtherTemplateRequest.ProtoReflect.Descriptor instead.
func (*SaveDeviceConfAsOtherTemplateRequest) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{31}
}

func (x *SaveDeviceConfAsOtherTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SaveDeviceConfAsOtherTemplateRequest) GetOtherTemplateInfo() *TemplateBasicInfo {
	if x != nil {
		return x.OtherTemplateInfo
	}
	return nil
}

// device to core
type DeviceEntityCoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasicInfo   *DeviceEntityBasicInfo   `protobuf:"bytes,1,opt,name=basicInfo,proto3" json:"basicInfo"`
	SysField    *DeviceEntitySysField    `protobuf:"bytes,2,opt,name=sysField,proto3" json:"sysField"`
	ConnectInfo *DeviceEntityConnectInfo `protobuf:"bytes,3,opt,name=connectInfo,proto3" json:"connectInfo"`
}

func (x *DeviceEntityCoreInfo) Reset() {
	*x = DeviceEntityCoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEntityCoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEntityCoreInfo) ProtoMessage() {}

func (x *DeviceEntityCoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEntityCoreInfo.ProtoReflect.Descriptor instead.
func (*DeviceEntityCoreInfo) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{32}
}

func (x *DeviceEntityCoreInfo) GetBasicInfo() *DeviceEntityBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *DeviceEntityCoreInfo) GetSysField() *DeviceEntitySysField {
	if x != nil {
		return x.SysField
	}
	return nil
}

func (x *DeviceEntityCoreInfo) GetConnectInfo() *DeviceEntityConnectInfo {
	if x != nil {
		return x.ConnectInfo
	}
	return nil
}

type UpdateDeviceEntityCoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId  string                 `protobuf:"bytes,1,opt,name=template_id,json=templateId,proto3" json:"template_id"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
	BasicInfo   *DeviceEntityBasicInfo `protobuf:"bytes,3,opt,name=basicInfo,proto3" json:"basicInfo"`
}

func (x *UpdateDeviceEntityCoreInfo) Reset() {
	*x = UpdateDeviceEntityCoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceEntityCoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceEntityCoreInfo) ProtoMessage() {}

func (x *UpdateDeviceEntityCoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceEntityCoreInfo.ProtoReflect.Descriptor instead.
func (*UpdateDeviceEntityCoreInfo) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateDeviceEntityCoreInfo) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *UpdateDeviceEntityCoreInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDeviceEntityCoreInfo) GetBasicInfo() *DeviceEntityBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

//------------------------------------------------------------------------------
// Basic data types
//------------------------------------------------------------------------------
type DeviceEntityBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Description      string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
	ParentId         string          `protobuf:"bytes,3,opt,name=parentId,proto3" json:"parentId"`
	ParentName       string          `protobuf:"bytes,4,opt,name=parentName,proto3" json:"parentName"`
	DirectConnection bool            `protobuf:"varint,5,opt,name=directConnection,proto3" json:"directConnection"`
	TemplateId       string          `protobuf:"bytes,6,opt,name=templateId,proto3" json:"templateId"`
	TemplateName     string          `protobuf:"bytes,7,opt,name=templateName,proto3" json:"templateName"`
	SelfLearn        bool            `protobuf:"varint,8,opt,name=selfLearn,proto3" json:"selfLearn"`
	Ext              *structpb.Value `protobuf:"bytes,9,opt,name=ext,proto3" json:"ext"`
	ExtBusiness      *structpb.Value `protobuf:"bytes,10,opt,name=extBusiness,proto3" json:"extBusiness"`
}

func (x *DeviceEntityBasicInfo) Reset() {
	*x = DeviceEntityBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEntityBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEntityBasicInfo) ProtoMessage() {}

func (x *DeviceEntityBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEntityBasicInfo.ProtoReflect.Descriptor instead.
func (*DeviceEntityBasicInfo) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{34}
}

func (x *DeviceEntityBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceEntityBasicInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceEntityBasicInfo) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *DeviceEntityBasicInfo) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *DeviceEntityBasicInfo) GetDirectConnection() bool {
	if x != nil {
		return x.DirectConnection
	}
	return false
}

func (x *DeviceEntityBasicInfo) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *DeviceEntityBasicInfo) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *DeviceEntityBasicInfo) GetSelfLearn() bool {
	if x != nil {
		return x.SelfLearn
	}
	return false
}

func (x *DeviceEntityBasicInfo) GetExt() *structpb.Value {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *DeviceEntityBasicInfo) GetExtBusiness() *structpb.Value {
	if x != nil {
		return x.ExtBusiness
	}
	return nil
}

type TemplateBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
}

func (x *TemplateBasicInfo) Reset() {
	*x = TemplateBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateBasicInfo) ProtoMessage() {}

func (x *TemplateBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateBasicInfo.ProtoReflect.Descriptor instead.
func (*TemplateBasicInfo) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{35}
}

func (x *TemplateBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemplateBasicInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// system fields
type DeviceEntitySysField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId            string `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id"`
	XCreatedAt     int64  `protobuf:"varint,2,opt,name=_createdAt,json=CreatedAt,proto3" json:"_createdAt"`
	XUpdatedAt     int64  `protobuf:"varint,3,opt,name=_updatedAt,json=UpdatedAt,proto3" json:"_updatedAt"`
	XStatus        string `protobuf:"bytes,4,opt,name=_status,json=Status,proto3" json:"_status"`
	XEnable        bool   `protobuf:"varint,5,opt,name=_enable,json=Enable,proto3" json:"_enable"`
	XToken         string `protobuf:"bytes,6,opt,name=_token,json=Token,proto3" json:"_token"`
	XOwner         string `protobuf:"bytes,7,opt,name=_owner,json=Owner,proto3" json:"_owner"`
	XSource        string `protobuf:"bytes,8,opt,name=_source,json=Source,proto3" json:"_source"`
	XSpacePath     string `protobuf:"bytes,9,opt,name=_spacePath,json=SpacePath,proto3" json:"_spacePath"`
	XSubscribeAddr string `protobuf:"bytes,10,opt,name=_subscribeAddr,json=SubscribeAddr,proto3" json:"_subscribeAddr"`
}

func (x *DeviceEntitySysField) Reset() {
	*x = DeviceEntitySysField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEntitySysField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEntitySysField) ProtoMessage() {}

func (x *DeviceEntitySysField) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEntitySysField.ProtoReflect.Descriptor instead.
func (*DeviceEntitySysField) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceEntitySysField) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *DeviceEntitySysField) GetXCreatedAt() int64 {
	if x != nil {
		return x.XCreatedAt
	}
	return 0
}

func (x *DeviceEntitySysField) GetXUpdatedAt() int64 {
	if x != nil {
		return x.XUpdatedAt
	}
	return 0
}

func (x *DeviceEntitySysField) GetXStatus() string {
	if x != nil {
		return x.XStatus
	}
	return ""
}

func (x *DeviceEntitySysField) GetXEnable() bool {
	if x != nil {
		return x.XEnable
	}
	return false
}

func (x *DeviceEntitySysField) GetXToken() string {
	if x != nil {
		return x.XToken
	}
	return ""
}

func (x *DeviceEntitySysField) GetXOwner() string {
	if x != nil {
		return x.XOwner
	}
	return ""
}

func (x *DeviceEntitySysField) GetXSource() string {
	if x != nil {
		return x.XSource
	}
	return ""
}

func (x *DeviceEntitySysField) GetXSpacePath() string {
	if x != nil {
		return x.XSpacePath
	}
	return ""
}

func (x *DeviceEntitySysField) GetXSubscribeAddr() string {
	if x != nil {
		return x.XSubscribeAddr
	}
	return ""
}

// connectInfo
type DeviceEntityConnectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XClientId string `protobuf:"bytes,1,opt,name=_clientId,json=ClientId,proto3" json:"_clientId"`
	XOnline   bool   `protobuf:"varint,2,opt,name=_online,json=Online,proto3" json:"_online"`
	XUserName string `protobuf:"bytes,3,opt,name=_userName,json=UserName,proto3" json:"_userName"`
	XPeerHost string `protobuf:"bytes,4,opt,name=_peerHost,json=PeerHost,proto3" json:"_peerHost"`
	XSockPort string `protobuf:"bytes,5,opt,name=_sockPort,json=SockPort,proto3" json:"_sockPort"`
	XProtocol string `protobuf:"bytes,6,opt,name=_protocol,json=Protocol,proto3" json:"_protocol"`
}

func (x *DeviceEntityConnectInfo) Reset() {
	*x = DeviceEntityConnectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEntityConnectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEntityConnectInfo) ProtoMessage() {}

func (x *DeviceEntityConnectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEntityConnectInfo.ProtoReflect.Descriptor instead.
func (*DeviceEntityConnectInfo) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{37}
}

func (x *DeviceEntityConnectInfo) GetXClientId() string {
	if x != nil {
		return x.XClientId
	}
	return ""
}

func (x *DeviceEntityConnectInfo) GetXOnline() bool {
	if x != nil {
		return x.XOnline
	}
	return false
}

func (x *DeviceEntityConnectInfo) GetXUserName() string {
	if x != nil {
		return x.XUserName
	}
	return ""
}

func (x *DeviceEntityConnectInfo) GetXPeerHost() string {
	if x != nil {
		return x.XPeerHost
	}
	return ""
}

func (x *DeviceEntityConnectInfo) GetXSockPort() string {
	if x != nil {
		return x.XSockPort
	}
	return ""
}

func (x *DeviceEntityConnectInfo) GetXProtocol() string {
	if x != nil {
		return x.XProtocol
	}
	return ""
}

type ListEntityQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Filter filter = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "限制"}];
	//Page page = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "分页"}];
	PageNum      int32        `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num"`
	PageSize     int32        `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	OrderBy      string       `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	IsDescending bool         `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending"`
	Query        string       `protobuf:"bytes,5,opt,name=query,proto3" json:"query"`
	Condition    []*Condition `protobuf:"bytes,6,rep,name=condition,proto3" json:"condition"`
}

func (x *ListEntityQuery) Reset() {
	*x = ListEntityQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntityQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntityQuery) ProtoMessage() {}

func (x *ListEntityQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntityQuery.ProtoReflect.Descriptor instead.
func (*ListEntityQuery) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{38}
}

func (x *ListEntityQuery) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListEntityQuery) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEntityQuery) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListEntityQuery) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *ListEntityQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListEntityQuery) GetCondition() []*Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	//string value = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "值"}];
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{39}
}

func (x *Condition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Condition) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Condition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{40}
}

func (x *Ids) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Keys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys"`
}

func (x *Keys) Reset() {
	*x = Keys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keys) ProtoMessage() {}

func (x *Keys) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keys.ProtoReflect.Descriptor instead.
func (*Keys) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{41}
}

func (x *Keys) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Paths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths"`
}

func (x *Paths) Reset() {
	*x = Paths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paths) ProtoMessage() {}

func (x *Paths) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paths.ProtoReflect.Descriptor instead.
func (*Paths) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{42}
}

func (x *Paths) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Ext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *Ext) Reset() {
	*x = Ext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext) ProtoMessage() {}

func (x *Ext) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext.ProtoReflect.Descriptor instead.
func (*Ext) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{43}
}

func (x *Ext) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Ext) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Enable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable"`
}

func (x *Enable) Reset() {
	*x = Enable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enable) ProtoMessage() {}

func (x *Enable) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enable.ProtoReflect.Descriptor instead.
func (*Enable) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{44}
}

func (x *Enable) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ListEntityExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*Expression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions"`
}

func (x *ListEntityExpression) Reset() {
	*x = ListEntityExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntityExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntityExpression) ProtoMessage() {}

func (x *ListEntityExpression) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntityExpression.ProtoReflect.Descriptor instead.
func (*ListEntityExpression) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{45}
}

func (x *ListEntityExpression) GetExpressions() []*Expression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        string `protobuf:"bytes,1,opt,name=path,proto3" json:"path"`
	Expression  string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{46}
}

func (x *Expression) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Expression) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Expression) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Expression) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurName      string `protobuf:"bytes,1,opt,name=curName,proto3" json:"curName"`
	Direction    string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction"`
	RelationType string `protobuf:"bytes,3,opt,name=relationType,proto3" json:"relationType"`
	TargetName   string `protobuf:"bytes,4,opt,name=targetName,proto3" json:"targetName"`
	TargetId     string `protobuf:"bytes,5,opt,name=targetId,proto3" json:"targetId"`
	TargetType   string `protobuf:"bytes,6,opt,name=targetType,proto3" json:"targetType"` //string operation = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "binding or unbinding"}];
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{47}
}

func (x *Relation) GetCurName() string {
	if x != nil {
		return x.CurName
	}
	return ""
}

func (x *Relation) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Relation) GetRelationType() string {
	if x != nil {
		return x.RelationType
	}
	return ""
}

func (x *Relation) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *Relation) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Relation) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

type SetContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Value *structpb.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *SetContent) Reset() {
	*x = SetContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetContent) ProtoMessage() {}

func (x *SetContent) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetContent.ProtoReflect.Descriptor instead.
func (*SetContent) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{48}
}

func (x *SetContent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetContent) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type CreateTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateObject *structpb.Value `protobuf:"bytes,1,opt,name=templateObject,proto3" json:"templateObject"`
}

func (x *CreateTemplateResponse) Reset() {
	*x = CreateTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_device_v1_device_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTemplateResponse) ProtoMessage() {}

func (x *CreateTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_device_v1_device_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateTemplateResponse) Descriptor() ([]byte, []int) {
	return file_api_device_v1_device_proto_rawDescGZIP(), []int{49}
}

func (x *CreateTemplateResponse) GetTemplateObject() *structpb.Value {
	if x != nil {
		return x.TemplateObject
	}
	return nil
}

var File_api_device_v1_device_proto protoreflect.FileDescriptor

var file_api_device_v1_device_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1,
	0xa1, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x91, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x73, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49,
	0x44, 0x20, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x7d, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x64, 0x44, 0x65,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x32, 0x19, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0x20, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x0e,
	0x46, 0x61, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x08, 0x32, 0x06, 0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x7c, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67,
	0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x71, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x54, 0x0a, 0x13, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x51, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4,
	0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x32, 0x14, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x4b, 0x56, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x83, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x32, 0x1c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1,
	0x9e, 0xe6, 0x80, 0xa7, 0x4b, 0x65, 0x79, 0x20, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xb8, 0x9a, 0xe5,
	0x8a, 0xa1, 0x4b, 0x65, 0x79, 0x20, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0xa9,
	0xe5, 0xb1, 0x95, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x7c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x43, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x4b, 0x56, 0x52,
	0x03, 0x65, 0x78, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xae, 0x9e, 0xe4, 0xbd,
	0x93, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xae, 0x9e, 0xe4, 0xbd, 0x93, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe5, 0xae, 0x9e, 0xe4, 0xbd, 0x93, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x32, 0x06, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x75,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x32, 0x15, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe8,
	0xa1, 0xa8, 0xe8, 0xbe, 0xbe, 0xe5, 0xbc, 0x8f, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xae, 0x9e, 0xe4,
	0xbd, 0x93, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x32, 0x17, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x70, 0x61, 0x74, 0x68, 0x20, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x22, 0x3e, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xae, 0x9e, 0xe4, 0xbd, 0x93, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x85,
	0xb3, 0xe7, 0xb3, 0xbb, 0xe8, 0xa1, 0xa8, 0xe8, 0xbe, 0xbe, 0xe5, 0xbc, 0x8f, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x52, 0x10, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x23,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe5, 0xae, 0x9e, 0xe4, 0xbd, 0x93, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x92,
	0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x24, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0xe5, 0x85, 0xb3, 0xe7,
	0xb3, 0xbb, 0xe8, 0xa1, 0xa8, 0xe8, 0xbe, 0xbe, 0xe5, 0xbc, 0x8f, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x52, 0x10, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x79, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41,
	0x0b, 0x32, 0x09, 0x20, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0xae,
	0xbe, 0xe7, 0xbd, 0xae, 0xe7, 0x9a, 0x84, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0x20, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x32, 0x0d, 0x20, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe5, 0x86, 0x85, 0xe5,
	0xae, 0xb9, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x17,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x20, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x20, 0xe8, 0xae, 0xbe, 0xe7, 0xbd,
	0xae, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x44, 0x0a, 0x22, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x41, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x20, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x24, 0x53, 0x61, 0x76, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x32, 0x09, 0x20, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x73, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x23, 0x92, 0x41,
	0x20, 0x32, 0x1e, 0xe5, 0x8f, 0xa6, 0xe5, 0xad, 0x98, 0xe4, 0xb8, 0xba, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0xe7, 0x9a, 0x84, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a,
	0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x79, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x08, 0x73, 0x79, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x61,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xde, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xde, 0x04, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xbb, 0x84, 0x49, 0x44, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x10,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0x9b, 0xb4, 0xe8, 0xbf, 0x9e, 0x52,
	0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x49, 0x44, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe8, 0xae, 0xbe,
	0xe5, 0xa4, 0x87, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe8, 0x87, 0xaa, 0xe5, 0xad, 0xa6, 0xe4,
	0xb9, 0xa0, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x41, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6,
	0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x51, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95,
	0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x49, 0x44, 0x52, 0x02, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x0a, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12,
	0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32,
	0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f,
	0x32, 0x0d, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0xaf, 0x2f, 0xe5, 0x81, 0x9c, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x20, 0xe6, 0x89,
	0x80, 0xe6, 0x9c, 0x89, 0xe8, 0x80, 0x85, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0x52, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xa0, 0x91, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x09,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0e, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2d, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7,
	0xab, 0xaf, 0x49, 0x44, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x07, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe5, 0xaf, 0xb9, 0xe7, 0xab, 0xaf, 0xe4, 0xb8, 0xbb, 0xe6, 0x9c, 0xba, 0x52, 0x08, 0x50,
	0x65, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x5f, 0x73, 0x6f, 0x63, 0x6b,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe7, 0xab, 0xaf, 0xe5, 0x8f, 0xa3, 0x52, 0x08, 0x53, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e,
	0xa5, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0xfa, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xae,
	0xb0, 0xe5, 0xbd, 0x95, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0xb6, 0xe6,
	0x9d, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x59, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe9, 0x80, 0x86, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0xef, 0xbc, 0x9a, 0xe4, 0xb8, 0x8d, 0xe9, 0x80, 0x86, 0xe5, 0xba, 0x8f, 0xef, 0xbc, 0x8c, 0x74,
	0x72, 0x75, 0x65, 0x3a, 0xe9, 0x80, 0x86, 0xe5, 0xba, 0x8f, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x65, 0x73,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe7, 0xbb, 0x84, 0xe5, 0x90, 0x88, 0xe6, 0x9d, 0xa1,
	0xe4, 0xbb, 0xb6, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88,
	0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x32, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0xbe, 0x93, 0xe5, 0x87, 0xba, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x08, 0x92, 0x41, 0x05, 0x32, 0x03, 0xe5, 0x80, 0xbc, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0x92, 0x41, 0x74, 0x32, 0x72, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe7, 0xac, 0xa6, 0x2c, 0x20, 0x24, 0x65, 0x71, 0xe4, 0xb8, 0xba, 0xe7, 0x9b,
	0xb8, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0x24, 0x6e, 0x65, 0x71, 0xe4, 0xb8, 0xba, 0xe4, 0xb8,
	0x8d, 0xe7, 0xad, 0x89, 0xef, 0xbc, 0x8c, 0x24, 0x6c, 0x74, 0xe4, 0xb8, 0xba, 0xe5, 0xb0, 0x8f,
	0xe4, 0xba, 0x8e, 0xef, 0xbc, 0x8c, 0x24, 0x67, 0x74, 0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xa7, 0xe4,
	0xba, 0x8e, 0xef, 0xbc, 0x8c, 0x24, 0x6c, 0x6e, 0x65, 0xe4, 0xb8, 0xba, 0xe5, 0xb0, 0x8f, 0xe4,
	0xba, 0x8e, 0xe7, 0xad, 0x89, 0xe4, 0xba, 0x8e, 0xef, 0xbc, 0x8c, 0x20, 0x24, 0x67, 0x6e, 0x65,
	0xe4, 0xb8, 0xba, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0xe7, 0xad, 0x89, 0xe4, 0xba, 0x8e, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x03, 0x49, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x32, 0x12, 0x69, 0x64, 0x20, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2,
	0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x04, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x6b, 0x65, 0x79, 0x20, 0xe5, 0xad, 0x97, 0xe7,
	0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x95, 0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x38, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14,
	0x70, 0x61, 0x74, 0x68, 0x20, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8, 0xb2, 0xe6, 0x95,
	0xb0, 0xe7, 0xbb, 0x84, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x5b, 0x0a, 0x03, 0x45,
	0x78, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe9, 0x85, 0x8d, 0xe7,
	0xbd, 0xae, 0x6b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11,
	0xe6, 0x89, 0xa9, 0xe5, 0xb1, 0x95, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x6c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x9f, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x32, 0x25, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5,
	0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x20, 0x6f, 0x72, 0x20, 0xe9, 0x81, 0xa5, 0xe6, 0xb5, 0x8b, 0x69,
	0x64, 0x20, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe6,
	0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x9a, 0x84, 0xe8, 0xb7,
	0xaf, 0xe5, 0xbe, 0x84, 0xef, 0xbc, 0x9a, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0x20,
	0x2b, 0x20, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0x6f, 0x72, 0xe9, 0x81, 0xa5, 0xe6, 0xb5, 0x8b,
	0x69, 0x64, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0xe5, 0x8f, 0xaf, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe6, 0x89, 0xbf, 0xe8, 0xbd, 0xbd, 0x69, 0x64, 0x20, 0xe4, 0xb8, 0x8e, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0x98, 0xa0, 0xe5, 0xb0, 0x84, 0x20, 0xe4,
	0xbe, 0xbf, 0xe4, 0xba, 0x8e, 0xe5, 0xb1, 0x95, 0xe7, 0xa4, 0xba, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x97, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x07, 0x63, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x07, 0x63, 0x75, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0xe5, 0x85, 0xb3, 0xe7, 0xb3,
	0xbb, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x20, 0x20, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe5, 0x8f, 0xaa, 0xe5, 0xa1,
	0xab, 0xef, 0xbc, 0x9a, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32,
	0x24, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0xe7, 0x9b,
	0xae, 0xe5, 0x89, 0x8d, 0xe5, 0x8f, 0xaa, 0xe5, 0xa1, 0xab, 0xef, 0xbc, 0x9a, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x20, 0xe6,
	0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0x49, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe8,
	0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0xe7, 0x9b, 0xae, 0xe5,
	0x89, 0x8d, 0xe5, 0x8f, 0xaa, 0xe5, 0xa1, 0xab, 0x3a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0xe5, 0xb1, 0x9e,
	0xe6, 0x80, 0xa7, 0x20, 0x6f, 0x72, 0x20, 0x20, 0xe5, 0x91, 0xbd, 0xe4, 0xbb, 0xa4, 0x20, 0xe6,
	0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe7, 0xac, 0xa6, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0xae, 0xbe, 0xe7,
	0xbd, 0xae, 0xe7, 0x9a, 0x84, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0x52,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32,
	0xcd, 0x23, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x08, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x0c, 0x64, 0x65, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x92, 0x41, 0x39, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0xb8, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x1a, 0x0d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x0c, 0x64, 0x65, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x92,
	0x41, 0x39, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb1, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x0f, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x03,
	0x69, 0x64, 0x73, 0x92, 0x41, 0x39, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12,
	0x9b, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x11, 0x67, 0x65, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xaa, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x07, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x92, 0x41, 0x32, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2a,
	0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xd8, 0x01, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22,
	0x19, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x65,
	0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x0b, 0x65, 0x78, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x92, 0x41, 0x4b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x61, 0x64, 0x64, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2a, 0x14, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xe5, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x1a, 0x19, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x0b, 0x65, 0x78,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x92, 0x41, 0x51, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xe1, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x7f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x20, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x92, 0x41, 0x4e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2a, 0x14,
	0x44, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f,
	0x4b, 0x12, 0xa7, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x11, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x74, 0x3a, 0x03, 0x65, 0x78, 0x74, 0x92, 0x41,
	0x3a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x15, 0x61, 0x64, 0x64, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2a, 0x0c, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb8, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x12,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x66,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x18, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x3a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x92, 0x41, 0x3d, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x0c, 0x44, 0x65, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x1a, 0x11, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x78, 0x74, 0x3a, 0x03, 0x65, 0x78, 0x74, 0x92, 0x41, 0x40, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xd7, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x16, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x92, 0x41,
	0x45, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xd7, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x1a, 0x16, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0b, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x92, 0x41, 0x45, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0xdd, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x70, 0x61, 0x74, 0x68, 0x7d, 0x92, 0x41, 0x41, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x13, 0x67, 0x65, 0x74, 0x20, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x15, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0xd8, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x1d, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x92, 0x41, 0x45, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xd9, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x92, 0x41, 0x41, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x87, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x1b, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x3a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x92, 0x41, 0x4e, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x2a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x6f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f,
	0x4b, 0x12, 0xa6, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x61, 0x77, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x15, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x61, 0x77, 0x2f, 0x73, 0x65, 0x74, 0x3a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x92, 0x41, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x73, 0x65, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x72, 0x61, 0x77, 0x2a,
	0x0c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x61, 0x77, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xc3, 0x01, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x74, 0x65,
	0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x1b, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x3a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x92, 0x41, 0x3d, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x13, 0x73, 0x65, 0x74,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x74, 0x65,
	0x2a, 0x11, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x75,
	0x62, 0x74, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0xbc, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x19, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x74, 0x3a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x92, 0x41, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x73, 0x65,
	0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2a, 0x10, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12,
	0xf3, 0x01, 0x0a, 0x1b, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x41, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x74, 0x65, 0x12,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x73,
	0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x22, 0x28, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x41,
	0x73, 0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x02, 0x69,
	0x64, 0x92, 0x41, 0x51, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x73, 0x61,
	0x76, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x41, 0x73,
	0x53, 0x65, 0x6c, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2a, 0x1a, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x73, 0x53, 0x65, 0x6c,
	0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x74, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x97, 0x02, 0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x41, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x29, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x73, 0x61, 0x76, 0x65, 0x41, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x92, 0x41, 0x53, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x73, 0x61, 0x76, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x41, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2a, 0x1b, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x41, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x74, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x42,
	0x44, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x6b, 0x65, 0x65, 0x6c, 0x2d, 0x69, 0x6f, 0x2f, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_device_v1_device_proto_rawDescOnce sync.Once
	file_api_device_v1_device_proto_rawDescData = file_api_device_v1_device_proto_rawDesc
)

func file_api_device_v1_device_proto_rawDescGZIP() []byte {
	file_api_device_v1_device_proto_rawDescOnce.Do(func() {
		file_api_device_v1_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_device_v1_device_proto_rawDescData)
	})
	return file_api_device_v1_device_proto_rawDescData
}

var file_api_device_v1_device_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_api_device_v1_device_proto_goTypes = []interface{}{
	(*CreateDeviceRequest)(nil),                  // 0: api.device.v1.CreateDeviceRequest
	(*CreateDeviceResponse)(nil),                 // 1: api.device.v1.CreateDeviceResponse
	(*UpdateDeviceRequest)(nil),                  // 2: api.device.v1.UpdateDeviceRequest
	(*UpdateDeviceResponse)(nil),                 // 3: api.device.v1.UpdateDeviceResponse
	(*DeleteDeviceRequest)(nil),                  // 4: api.device.v1.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil),                 // 5: api.device.v1.DeleteDeviceResponse
	(*FaildDelDevice)(nil),                       // 6: api.device.v1.FaildDelDevice
	(*GetDeviceRequest)(nil),                     // 7: api.device.v1.GetDeviceRequest
	(*GetDeviceResponse)(nil),                    // 8: api.device.v1.GetDeviceResponse
	(*ListDeviceRequest)(nil),                    // 9: api.device.v1.ListDeviceRequest
	(*ListDeviceResponse)(nil),                   // 10: api.device.v1.ListDeviceResponse
	(*EnableDeviceRequest)(nil),                  // 11: api.device.v1.EnableDeviceRequest
	(*AddDeviceExtBusinessRequest)(nil),          // 12: api.device.v1.AddDeviceExtBusinessRequest
	(*AddDeviceExtRequest)(nil),                  // 13: api.device.v1.AddDeviceExtRequest
	(*DeleteDeviceExtRequest)(nil),               // 14: api.device.v1.DeleteDeviceExtRequest
	(*DeleteDeviceExtBusinessRequest)(nil),       // 15: api.device.v1.DeleteDeviceExtBusinessRequest
	(*UpdateDeviceExtBusinessRequest)(nil),       // 16: api.device.v1.UpdateDeviceExtBusinessRequest
	(*UpdateDeviceExtRequest)(nil),               // 17: api.device.v1.UpdateDeviceExtRequest
	(*CreateDeviceDataRelationRequest)(nil),      // 18: api.device.v1.CreateDeviceDataRelationRequest
	(*UpdateDeviceDataRelationRequest)(nil),      // 19: api.device.v1.UpdateDeviceDataRelationRequest
	(*GetDeviceDataRelationRequest)(nil),         // 20: api.device.v1.GetDeviceDataRelationRequest
	(*GetDeviceDataRelationResponse)(nil),        // 21: api.device.v1.GetDeviceDataRelationResponse
	(*DeleteDeviceDataRelationRequest)(nil),      // 22: api.device.v1.DeleteDeviceDataRelationRequest
	(*ListDeviceDataRelationRequest)(nil),        // 23: api.device.v1.ListDeviceDataRelationRequest
	(*ListDeviceDataRelationResponse)(nil),       // 24: api.device.v1.ListDeviceDataRelationResponse
	(*CreateDeviceDataRelationAutoRequest)(nil),  // 25: api.device.v1.CreateDeviceDataRelationAutoRequest
	(*CreateDeviceDataRelationAutoResponse)(nil), // 26: api.device.v1.CreateDeviceDataRelationAutoResponse
	(*SetDeviceRawRequest)(nil),                  // 27: api.device.v1.SetDeviceRawRequest
	(*SetDeviceAttributeRequest)(nil),            // 28: api.device.v1.SetDeviceAttributeRequest
	(*SetDeviceCommandRequest)(nil),              // 29: api.device.v1.SetDeviceCommandRequest
	(*SaveDeviceConfAsSelfTemplteRequest)(nil),   // 30: api.device.v1.SaveDeviceConfAsSelfTemplteRequest
	(*SaveDeviceConfAsOtherTemplateRequest)(nil), // 31: api.device.v1.SaveDeviceConfAsOtherTemplateRequest
	(*DeviceEntityCoreInfo)(nil),                 // 32: api.device.v1.DeviceEntityCoreInfo
	(*UpdateDeviceEntityCoreInfo)(nil),           // 33: api.device.v1.UpdateDeviceEntityCoreInfo
	(*DeviceEntityBasicInfo)(nil),                // 34: api.device.v1.DeviceEntityBasicInfo
	(*TemplateBasicInfo)(nil),                    // 35: api.device.v1.TemplateBasicInfo
	(*DeviceEntitySysField)(nil),                 // 36: api.device.v1.DeviceEntitySysField
	(*DeviceEntityConnectInfo)(nil),              // 37: api.device.v1.DeviceEntityConnectInfo
	(*ListEntityQuery)(nil),                      // 38: api.device.v1.ListEntityQuery
	(*Condition)(nil),                            // 39: api.device.v1.Condition
	(*Ids)(nil),                                  // 40: api.device.v1.Ids
	(*Keys)(nil),                                 // 41: api.device.v1.Keys
	(*Paths)(nil),                                // 42: api.device.v1.Paths
	(*Ext)(nil),                                  // 43: api.device.v1.Ext
	(*Enable)(nil),                               // 44: api.device.v1.Enable
	(*ListEntityExpression)(nil),                 // 45: api.device.v1.listEntityExpression
	(*Expression)(nil),                           // 46: api.device.v1.Expression
	(*Relation)(nil),                             // 47: api.device.v1.Relation
	(*SetContent)(nil),                           // 48: api.device.v1.SetContent
	(*CreateTemplateResponse)(nil),               // 49: api.device.v1.CreateTemplateResponse
	(*structpb.Value)(nil),                       // 50: google.protobuf.Value
	(*emptypb.Empty)(nil),                        // 51: google.protobuf.Empty
}
var file_api_device_v1_device_proto_depIdxs = []int32{
	34, // 0: api.device.v1.CreateDeviceRequest.devBasicInfo:type_name -> api.device.v1.DeviceEntityBasicInfo
	50, // 1: api.device.v1.CreateDeviceResponse.deviceObject:type_name -> google.protobuf.Value
	34, // 2: api.device.v1.UpdateDeviceRequest.devBasicInfo:type_name -> api.device.v1.DeviceEntityBasicInfo
	50, // 3: api.device.v1.UpdateDeviceResponse.deviceObject:type_name -> google.protobuf.Value
	40, // 4: api.device.v1.DeleteDeviceRequest.ids:type_name -> api.device.v1.Ids
	6,  // 5: api.device.v1.DeleteDeviceResponse.faildDelDevice:type_name -> api.device.v1.FaildDelDevice
	50, // 6: api.device.v1.GetDeviceResponse.deviceObject:type_name -> google.protobuf.Value
	38, // 7: api.device.v1.ListDeviceRequest.listEntityQuery:type_name -> api.device.v1.ListEntityQuery
	50, // 8: api.device.v1.ListDeviceResponse.listDeviceObject:type_name -> google.protobuf.Value
	44, // 9: api.device.v1.EnableDeviceRequest.enable:type_name -> api.device.v1.Enable
	50, // 10: api.device.v1.AddDeviceExtBusinessRequest.extBusiness:type_name -> google.protobuf.Value
	50, // 11: api.device.v1.AddDeviceExtRequest.ext:type_name -> google.protobuf.Value
	41, // 12: api.device.v1.DeleteDeviceExtRequest.keys:type_name -> api.device.v1.Keys
	41, // 13: api.device.v1.DeleteDeviceExtBusinessRequest.keys:type_name -> api.device.v1.Keys
	50, // 14: api.device.v1.UpdateDeviceExtBusinessRequest.extBusiness:type_name -> google.protobuf.Value
	50, // 15: api.device.v1.UpdateDeviceExtRequest.ext:type_name -> google.protobuf.Value
	45, // 16: api.device.v1.CreateDeviceDataRelationRequest.expressions:type_name -> api.device.v1.listEntityExpression
	45, // 17: api.device.v1.UpdateDeviceDataRelationRequest.expressions:type_name -> api.device.v1.listEntityExpression
	50, // 18: api.device.v1.GetDeviceDataRelationResponse.expressions:type_name -> google.protobuf.Value
	42, // 19: api.device.v1.DeleteDeviceDataRelationRequest.paths:type_name -> api.device.v1.Paths
	50, // 20: api.device.v1.ListDeviceDataRelationResponse.expressionObject:type_name -> google.protobuf.Value
	47, // 21: api.device.v1.CreateDeviceDataRelationAutoRequest.relation:type_name -> api.device.v1.Relation
	50, // 22: api.device.v1.CreateDeviceDataRelationAutoResponse.expressionObject:type_name -> google.protobuf.Value
	50, // 23: api.device.v1.SetDeviceRawRequest.value:type_name -> google.protobuf.Value
	48, // 24: api.device.v1.SetDeviceAttributeRequest.content:type_name -> api.device.v1.SetContent
	48, // 25: api.device.v1.SetDeviceCommandRequest.content:type_name -> api.device.v1.SetContent
	35, // 26: api.device.v1.SaveDeviceConfAsOtherTemplateRequest.otherTemplateInfo:type_name -> api.device.v1.TemplateBasicInfo
	34, // 27: api.device.v1.DeviceEntityCoreInfo.basicInfo:type_name -> api.device.v1.DeviceEntityBasicInfo
	36, // 28: api.device.v1.DeviceEntityCoreInfo.sysField:type_name -> api.device.v1.DeviceEntitySysField
	37, // 29: api.device.v1.DeviceEntityCoreInfo.connectInfo:type_name -> api.device.v1.DeviceEntityConnectInfo
	34, // 30: api.device.v1.UpdateDeviceEntityCoreInfo.basicInfo:type_name -> api.device.v1.DeviceEntityBasicInfo
	50, // 31: api.device.v1.DeviceEntityBasicInfo.ext:type_name -> google.protobuf.Value
	50, // 32: api.device.v1.DeviceEntityBasicInfo.extBusiness:type_name -> google.protobuf.Value
	39, // 33: api.device.v1.ListEntityQuery.condition:type_name -> api.device.v1.Condition
	50, // 34: api.device.v1.Condition.value:type_name -> google.protobuf.Value
	46, // 35: api.device.v1.listEntityExpression.expressions:type_name -> api.device.v1.Expression
	50, // 36: api.device.v1.SetContent.value:type_name -> google.protobuf.Value
	50, // 37: api.device.v1.CreateTemplateResponse.templateObject:type_name -> google.protobuf.Value
	0,  // 38: api.device.v1.Device.CreateDevice:input_type -> api.device.v1.CreateDeviceRequest
	2,  // 39: api.device.v1.Device.UpdateDevice:input_type -> api.device.v1.UpdateDeviceRequest
	4,  // 40: api.device.v1.Device.DeleteDevice:input_type -> api.device.v1.DeleteDeviceRequest
	7,  // 41: api.device.v1.Device.GetDevice:input_type -> api.device.v1.GetDeviceRequest
	9,  // 42: api.device.v1.Device.SearchEntity:input_type -> api.device.v1.ListDeviceRequest
	12, // 43: api.device.v1.Device.AddDeviceExtBusiness:input_type -> api.device.v1.AddDeviceExtBusinessRequest
	16, // 44: api.device.v1.Device.UpdateDeviceExtBusiness:input_type -> api.device.v1.UpdateDeviceExtBusinessRequest
	15, // 45: api.device.v1.Device.DeleteDeviceExtBusiness:input_type -> api.device.v1.DeleteDeviceExtBusinessRequest
	13, // 46: api.device.v1.Device.AddDeviceExt:input_type -> api.device.v1.AddDeviceExtRequest
	14, // 47: api.device.v1.Device.DeleteDeviceExt:input_type -> api.device.v1.DeleteDeviceExtRequest
	17, // 48: api.device.v1.Device.UpdateDeviceExt:input_type -> api.device.v1.UpdateDeviceExtRequest
	18, // 49: api.device.v1.Device.CreateDeviceDataRelation:input_type -> api.device.v1.CreateDeviceDataRelationRequest
	19, // 50: api.device.v1.Device.UpdateDeviceDataRelation:input_type -> api.device.v1.UpdateDeviceDataRelationRequest
	20, // 51: api.device.v1.Device.GetDeviceDataRelation:input_type -> api.device.v1.GetDeviceDataRelationRequest
	22, // 52: api.device.v1.Device.DeleteDeviceDataRelation:input_type -> api.device.v1.DeleteDeviceDataRelationRequest
	23, // 53: api.device.v1.Device.ListDeviceDataRelation:input_type -> api.device.v1.ListDeviceDataRelationRequest
	25, // 54: api.device.v1.Device.CreateDeviceDataRelationAuto:input_type -> api.device.v1.CreateDeviceDataRelationAutoRequest
	27, // 55: api.device.v1.Device.SetDeviceRaw:input_type -> api.device.v1.SetDeviceRawRequest
	28, // 56: api.device.v1.Device.SetDeviceAttribte:input_type -> api.device.v1.SetDeviceAttributeRequest
	29, // 57: api.device.v1.Device.SetDeviceCommand:input_type -> api.device.v1.SetDeviceCommandRequest
	30, // 58: api.device.v1.Device.SaveDeviceConfAsSelfTemplte:input_type -> api.device.v1.SaveDeviceConfAsSelfTemplteRequest
	31, // 59: api.device.v1.Device.SaveDeviceConfAsOtherTemplte:input_type -> api.device.v1.SaveDeviceConfAsOtherTemplateRequest
	1,  // 60: api.device.v1.Device.CreateDevice:output_type -> api.device.v1.CreateDeviceResponse
	3,  // 61: api.device.v1.Device.UpdateDevice:output_type -> api.device.v1.UpdateDeviceResponse
	5,  // 62: api.device.v1.Device.DeleteDevice:output_type -> api.device.v1.DeleteDeviceResponse
	8,  // 63: api.device.v1.Device.GetDevice:output_type -> api.device.v1.GetDeviceResponse
	10, // 64: api.device.v1.Device.SearchEntity:output_type -> api.device.v1.ListDeviceResponse
	51, // 65: api.device.v1.Device.AddDeviceExtBusiness:output_type -> google.protobuf.Empty
	51, // 66: api.device.v1.Device.UpdateDeviceExtBusiness:output_type -> google.protobuf.Empty
	51, // 67: api.device.v1.Device.DeleteDeviceExtBusiness:output_type -> google.protobuf.Empty
	51, // 68: api.device.v1.Device.AddDeviceExt:output_type -> google.protobuf.Empty
	51, // 69: api.device.v1.Device.DeleteDeviceExt:output_type -> google.protobuf.Empty
	51, // 70: api.device.v1.Device.UpdateDeviceExt:output_type -> google.protobuf.Empty
	51, // 71: api.device.v1.Device.CreateDeviceDataRelation:output_type -> google.protobuf.Empty
	51, // 72: api.device.v1.Device.UpdateDeviceDataRelation:output_type -> google.protobuf.Empty
	21, // 73: api.device.v1.Device.GetDeviceDataRelation:output_type -> api.device.v1.GetDeviceDataRelationResponse
	51, // 74: api.device.v1.Device.DeleteDeviceDataRelation:output_type -> google.protobuf.Empty
	24, // 75: api.device.v1.Device.ListDeviceDataRelation:output_type -> api.device.v1.ListDeviceDataRelationResponse
	26, // 76: api.device.v1.Device.CreateDeviceDataRelationAuto:output_type -> api.device.v1.CreateDeviceDataRelationAutoResponse
	51, // 77: api.device.v1.Device.SetDeviceRaw:output_type -> google.protobuf.Empty
	51, // 78: api.device.v1.Device.SetDeviceAttribte:output_type -> google.protobuf.Empty
	51, // 79: api.device.v1.Device.SetDeviceCommand:output_type -> google.protobuf.Empty
	51, // 80: api.device.v1.Device.SaveDeviceConfAsSelfTemplte:output_type -> google.protobuf.Empty
	49, // 81: api.device.v1.Device.SaveDeviceConfAsOtherTemplte:output_type -> api.device.v1.CreateTemplateResponse
	60, // [60:82] is the sub-list for method output_type
	38, // [38:60] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_api_device_v1_device_proto_init() }
func file_api_device_v1_device_proto_init() {
	if File_api_device_v1_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_device_v1_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaildDelDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceExtBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceExtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceExtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceExtBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceExtBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceExtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceDataRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceDataRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceDataRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceDataRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceDataRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceDataRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceDataRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceDataRelationAutoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceDataRelationAutoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceRawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDeviceConfAsSelfTemplteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDeviceConfAsOtherTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEntityCoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceEntityCoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEntityBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEntitySysField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEntityConnectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntityQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEntityExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_device_v1_device_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_device_v1_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_device_v1_device_proto_goTypes,
		DependencyIndexes: file_api_device_v1_device_proto_depIdxs,
		MessageInfos:      file_api_device_v1_device_proto_msgTypes,
	}.Build()
	File_api_device_v1_device_proto = out.File
	file_api_device_v1_device_proto_rawDesc = nil
	file_api_device_v1_device_proto_goTypes = nil
	file_api_device_v1_device_proto_depIdxs = nil
}
