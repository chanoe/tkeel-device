// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeasureClient is the client API for Measure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeasureClient interface {
	CreateMeasure(ctx context.Context, in *CreateMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UpdateMeasure(ctx context.Context, in *UpdateMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteMeasure(ctx context.Context, in *DeleteMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	GetMeasure(ctx context.Context, in *GetMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	ListMeasure(ctx context.Context, in *ListMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type measureClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasureClient(cc grpc.ClientConnInterface) MeasureClient {
	return &measureClient{cc}
}

func (c *measureClient) CreateMeasure(ctx context.Context, in *CreateMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/api.measure.v1.Measure/CreateMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureClient) UpdateMeasure(ctx context.Context, in *UpdateMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/api.measure.v1.Measure/UpdateMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureClient) DeleteMeasure(ctx context.Context, in *DeleteMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/api.measure.v1.Measure/DeleteMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureClient) GetMeasure(ctx context.Context, in *GetMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/api.measure.v1.Measure/GetMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureClient) ListMeasure(ctx context.Context, in *ListMeasureRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/api.measure.v1.Measure/ListMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasureServer is the server API for Measure service.
// All implementations must embed UnimplementedMeasureServer
// for forward compatibility
type MeasureServer interface {
	CreateMeasure(context.Context, *CreateMeasureRequest) (*CommonResponse, error)
	UpdateMeasure(context.Context, *UpdateMeasureRequest) (*CommonResponse, error)
	DeleteMeasure(context.Context, *DeleteMeasureRequest) (*CommonResponse, error)
	GetMeasure(context.Context, *GetMeasureRequest) (*CommonResponse, error)
	ListMeasure(context.Context, *ListMeasureRequest) (*CommonResponse, error)
	mustEmbedUnimplementedMeasureServer()
}

// UnimplementedMeasureServer must be embedded to have forward compatible implementations.
type UnimplementedMeasureServer struct {
}

func (UnimplementedMeasureServer) CreateMeasure(context.Context, *CreateMeasureRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeasure not implemented")
}
func (UnimplementedMeasureServer) UpdateMeasure(context.Context, *UpdateMeasureRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeasure not implemented")
}
func (UnimplementedMeasureServer) DeleteMeasure(context.Context, *DeleteMeasureRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeasure not implemented")
}
func (UnimplementedMeasureServer) GetMeasure(context.Context, *GetMeasureRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasure not implemented")
}
func (UnimplementedMeasureServer) ListMeasure(context.Context, *ListMeasureRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeasure not implemented")
}
func (UnimplementedMeasureServer) mustEmbedUnimplementedMeasureServer() {}

// UnsafeMeasureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeasureServer will
// result in compilation errors.
type UnsafeMeasureServer interface {
	mustEmbedUnimplementedMeasureServer()
}

func RegisterMeasureServer(s grpc.ServiceRegistrar, srv MeasureServer) {
	s.RegisterService(&Measure_ServiceDesc, srv)
}

func _Measure_CreateMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServer).CreateMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.measure.v1.Measure/CreateMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServer).CreateMeasure(ctx, req.(*CreateMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Measure_UpdateMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServer).UpdateMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.measure.v1.Measure/UpdateMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServer).UpdateMeasure(ctx, req.(*UpdateMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Measure_DeleteMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServer).DeleteMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.measure.v1.Measure/DeleteMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServer).DeleteMeasure(ctx, req.(*DeleteMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Measure_GetMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServer).GetMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.measure.v1.Measure/GetMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServer).GetMeasure(ctx, req.(*GetMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Measure_ListMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServer).ListMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.measure.v1.Measure/ListMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServer).ListMeasure(ctx, req.(*ListMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Measure_ServiceDesc is the grpc.ServiceDesc for Measure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Measure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.measure.v1.Measure",
	HandlerType: (*MeasureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeasure",
			Handler:    _Measure_CreateMeasure_Handler,
		},
		{
			MethodName: "UpdateMeasure",
			Handler:    _Measure_UpdateMeasure_Handler,
		},
		{
			MethodName: "DeleteMeasure",
			Handler:    _Measure_DeleteMeasure_Handler,
		},
		{
			MethodName: "GetMeasure",
			Handler:    _Measure_GetMeasure_Handler,
		},
		{
			MethodName: "ListMeasure",
			Handler:    _Measure_ListMeasure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/measure/v1/measure.proto",
}
