
syntax = "proto3";

package api.group.v1;
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
//import public "tkeel-io/search/api/v1/search.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/tkeel-io/tkeel-device/api/group/v1;v1";
option java_multiple_files = true;
option java_package = "api.group.v1";

service Group {
	rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse) {
		option (google.api.http) = {
			post : "/groups"
			body : "group"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "create entity group";
            operation_id: "CreateGroup";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
	rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse) {
		option (google.api.http) = {
			put : "/groups/{id}"
			body : "group"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "update entity group";
            operation_id: "UpdateGroup";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
	rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse) {
		option (google.api.http) = {
			post : "/groups/delete"
            body : "ids"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "delete entity group";
            operation_id: "DeleteGroup";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
	rpc GetGroup (GetGroupRequest) returns (GetGroupResponse) {
		option (google.api.http) = {
			get : "/groups/{id}"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "get entity group";
            operation_id: "GetGroup";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
	/*rpc ListGroupItems (ListGroupItemsRequest) returns (ListGroupItemsResponse) {
		option (google.api.http) = {
			post : "/groups/search"
			body : "listEntityQuery"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "list entity group";
            operation_id: "ListGroup";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};*/
	
    rpc GetGroupTree (GetGroupTreeRequest) returns (GetGroupTreeResponse) {
		option (google.api.http) = {
			post : "/groups/tree"
			body : "listEntityQuery"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "get group tree";
            operation_id: "GetGroupTree";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
	
    rpc AddGroupExt (AddGroupExtRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
		    post : "/groups/{id}/ext" 
			body : "kvs"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "add group extensions";
            operation_id: "AddGroupExt";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
	rpc UpdateGroupExt (UpdateGroupExtRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
		    put : "/groups/{id}/ext" 
			body : "kvs"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "update group extensions";
            operation_id: "UpdateGroupExt";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
	rpc DelGroupExt (DelGroupExtRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
		    post : "/groups/{id}/ext/delete" 
			body : "keys"
		};
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "delete group extensions";
            operation_id: "DelGroupExt";
            tags: "group";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            }
        };
	};
}

//user to device
message CreateGroupRequest {
	GroupEntity      group = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
}

message UpdateGroupRequest {
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID"}];
  GroupEntity group = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "更新设备组信息"}];
}

message DeleteGroupRequest { 
	Ids                ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID 数组"}];
}

message DeleteGroupResponse {
    repeated FaildDelGroup faildDelGroup = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组删除失败 数组"}];
}
message FaildDelGroup {
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID"}];
    string reason = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "原因"}];
}

message GetGroupRequest { 
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID"}];
}
message GetGroupTreeRequest { 
    ListEntityQuery  listEntityQuery = 1;
}

message AddGroupExtRequest {
    string              id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID"}];
	google.protobuf.Value  kvs = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "扩展配置kv"}];
}

message UpdateGroupExtRequest {
    string              id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID"}];
	google.protobuf.Value  kvs = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "扩展配置kv"}];
}

message DelGroupExtRequest {
	Keys                    keys = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "扩展配置key 数组"}];
    string                    id = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID"}];
}

// device to core 
message GroupEntityCoreInfo {
    GroupEntity             group = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
    GroupEntitySysField     sysField = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组系统信息"}];
    //GroupEntitySubEntityIds subIds = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组子设备信息"}];
}
message UpdateGroupEntityCoreInfo {
    GroupEntity             group = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
}
// device to user 

message CreateGroupResponse {
    //api.core.v1.EntityResponse groupObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
    google.protobuf.Value groupObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
}

message UpdateGroupResponse {
    //api.core.v1.EntityResponse groupObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
    google.protobuf.Value groupObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
}

message GetGroupResponse {
    //api.core.v1.EntityResponse groupObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
    google.protobuf.Value groupObject = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组信息"}];
}
message GetGroupTreeResponse {
    google.protobuf.Value GroupTree = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组列表树"}];
}


// Basic data types

message GroupEntity {
	string name 			   = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组名称"}];
	string customId 		   = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组自定义ID"}];
	string description 		   = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组说明"}];
	string parentId      		   = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "父设备组ID"}];
	string parentName      		   = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "父设备组名称"}];
	google.protobuf.Value  ext = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组扩展属性"}];
}
message GroupEntitySubEntityIds {
    map<string,string>  subEntityId  = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "子设备ID列表"}];
}
message GroupEntitySysField {
    string _id                       = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组ID"}];
	int64 _createdAt 				 = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组创建时间"}];
    int64 _updatedAt 				 = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "设备组更新时间"}];
    string _owner = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: " 所有者"}];
    string _source = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "来源"}];
    string _spacePath = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "空间树路径"}];
    string _tenantId = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "租户ID"}];
}

message ListEntityQuery {
    int32 page_num= 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "记录开始位置"}];
    int32 page_size = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "每页限制条数"}];
    string order_by = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "排序字段"}];
    bool is_descending = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "是否逆序， false：不逆序，true:逆序"}];
    string query = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "es查询条件"}];
    repeated Condition condition = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "组合条件"}];
} 

message Condition {
	string field 		= 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "查询输出字段"}];
	string value  	= 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "值"}];
	string operator = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "操作符, $eq为相等，$neq为不等，$lt为小于，$gt为大于，$lne为小于等于， $gne为大于等于"}];
}

message Ids {
	repeated string ids = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "id 数组"}];
}
message Keys {
	repeated string keys = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "key 数组"}];
}
